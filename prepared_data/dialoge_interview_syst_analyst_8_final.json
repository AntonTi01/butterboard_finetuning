{
  "dialogue": [
    {
      "start_time": "00:00:03,920",
      "end_time": "00:00:16,520",
      "speaker": "interviewer",
      "text": "Вот. «Кем ты работал до этого?» Вот. «Про свой опыт системного аналитика. Какие решал интересные задачи?» Вот. Ну и в целом, всё, что хочешь интересного про работу, про свою текучку рассказать, можешь рассказать."
    },
    {
      "start_time": "00:00:17,700",
      "end_time": "00:03:15,900",
      "speaker": "candidate",
      "text": "Да, хорошо. Ну, первоначально это мой антикорр… Опыт работы системным аналитиком, он как бы мой единственный, ну, несмотря на мелкие подработки, вот. Работаю системным аналитиком я уже около трёх лет. Соответственно, после окончания института окончил я по направлению прикладная математика. Я хотел пойти работать на Big Data Science Analytica Вот. И, соответственно, искал подходящие вакансии. Нашёл одну вакансию, которая меня заинтересовала. Ну, она называлась «Системный аналитик». Более того, была сфера блокчейна. О блокчейне, как и о системном анализе, я ничего не знал. И, соответственно, ну, решил попробовать. И… Так получилось мое начало карьеры. Соответственно, поначалу я работал пресейлом, делал оценки. Далее развивался как системный аналитик. Соответственно, работал с... На аутсорсе. У нас была компания на аутсорсе. Работал с многими клиентами. Так же с известными в сфере блокчейна. Phantom Blockchain, там Solana, вот. Мы выполняли для них задачи. Ну, соответственно, там был мой первоначальный опыт. После этого я перешёл в другую компанию, начал работать с системой библиотечной деятельности. Эта вакансия, ну и компания, она была такая, ну, мы работали по некоему такому государственному регламенту, где использовался ГОСТ, где были Технописатели Соответственно, там было несколько этапов согласования, требований, которые проходили через несколько ступенек. Вот. И за весь вот этот опыт работы я работал больше с задачами на фронт. Далее я перешёл в компанию по разработке социальной сети, но этот проект тоже был, ну, как проектная работа, и, соответственно, На ней я тоже выполнял такие более фронтовые задачи. На текущем месте работы я уже работаю около года, и, соответственно, я являюсь, можно сказать, старшим системным аналитиком в компании. И мы работаем над продуктом. Здесь в основном задачи на бэк. Описание интеграций, ну и все основы утекающей задачи. И, соответственно, у меня в штате, помогая новичкам, аналитикам развиваться. Вот. Круто, спасибо."
    },
    {
      "start_time": "00:03:17,160",
      "end_time": "00:03:25,360",
      "speaker": "interviewer",
      "text": "Уточню ещё один момент. Расскажи немножко про состав команды, то есть как ты привык работать, кто обычно в команде присутствует."
    },
    {
      "start_time": "00:03:25,980",
      "end_time": "00:03:59,420",
      "speaker": "candidate",
      "text": "Ну, вообще, на всех местах работы у нас присутствует project-менеджер, который управляет проектом. Также есть дизайнер, соответственно, системной аналитик. Особо выделения на бизнес-аналитика нигде нету, поэтому роль бизнес- и системного аналитика выполняет один человек. Также есть разработчики Backfront, соответственно, DevOps. Ну и, наверное, всех, которых успел вспомнить, всех называл."
    },
    {
      "start_time": "00:04:01,520",
      "end_time": "00:04:41,300",
      "speaker": "interviewer",
      "text": "Окей, давай тогда… Пойдём по темам уже, да, по собеседованию. Сегодня поговорим про требования в целом, вот. Спрашиваю про архитектуру немножко. Обсудим нотации моделирования процессов. Конечно же, мы поговорим про интеграции, про технологии. И в конце немножко затронем SQL-чик. Может быть, даже в онлайне решишь нам пример. Вот. Ну, тогда давай, первый вопрос по требованиям. Начнём с простого. Какую ты себе представляешь классификацию?"
    },
    {
      "start_time": "00:04:41,900",
      "end_time": "00:05:20,300",
      "speaker": "candidate",
      "text": "Ну, функциональные, нефункциональные требования. Также есть бизнес-требования. А нефункциональные требования — это что такое? Это требования, которые в целом описывают некоторые ограничения на систему. На систему, на приложение в целом. То есть… Ну и не только. Они также могут описывать и какое-то руководство по пользованию, какую-то мануалку, да, для конечных пользователей, которые будут, соответственно, взаимодействовать как с системой, так и с каким-то конкретным решением."
    },
    {
      "start_time": "00:05:20,580",
      "end_time": "00:05:47,140",
      "speaker": "interviewer",
      "text": "А вот требования к UX и к UI — это к каким можно отнести? Требования к… Ну, не функциональные требования. Угу. С точки зрения формализации, да, функциональных требований, выделяют там такие, ну, понятия, как «user story» и «use case»? Можешь рассказать, в чём между ними разница? Или, может быть, пример привести одного и другого? Да, ну, S-кейс — это"
    },
    {
      "start_time": "00:05:47,340",
      "end_time": "00:06:40,800",
      "speaker": "candidate",
      "text": "Ну, вот есть, например, в UML с кейс-диаграмм. Это некая сводка сценариев, которая описывает верхнеуровневую работу определённой функциональности в системе. Вот. То есть, есть какая-то функциональность, соответственно, есть некие сценарии, как конечный пользователь взаимодействует с этими сценариями, и она описывает верхнего уровня. Вот. А User Story — это больше как Детальное описание самого юзкейса. Ты… Это, получается, идет в формате Ну, вообще, есть много фреймворков по работе с User Story. Там, Геркин, Кюкомба и ещё всякие, вот. Она описывает некую мотивацию определённого участника, ну, определённой роли, почему именно необходимо реализовать ту или иную фичу в системе, в решении."
    },
    {
      "start_time": "00:06:40,840",
      "end_time": "00:06:44,980",
      "speaker": "interviewer",
      "text": "Можешь, к примеру, вот юзер-старик какой-нибудь привести?"
    },
    {
      "start_time": "00:06:45,680",
      "end_time": "00:06:58,820",
      "speaker": "candidate",
      "text": "Как пользователя я хочу Я хочу иметь функциональную возможность выгружать отчет в Excel, чтобы сэкономить себе время."
    },
    {
      "start_time": "00:07:02,660",
      "end_time": "00:07:31,530",
      "speaker": "interviewer",
      "text": "Ты сказал, что «Изерстаря» — это такое более Низкоуровневый, да. Ну, скажем так, инструмент, да, для описания требований, нежели юзкейс. А вот если нам нужно, например, описать какие-то альтернативные поведения, да, системы на какие-то действия пользователя. То что нам лучше, использовать юзкейсы или юзерстари?"
    },
    {
      "start_time": "00:07:31,530",
      "end_time": "00:09:08,320",
      "speaker": "candidate",
      "text": "Ну вот, в частности, я говорил про диаграмму из кейсов, потому что она, ну, для такого поверхностного понимания очень хорошо как раз иллюстрирует функцию. Конечно же, можно use case, ну, дополнить, точнее, вот эти частные сценарии, да, которые мы изобразили на диаграмме, можно расписать в виде сценария, где как раз мы будем указывать Описание этого сценария, где будем указывать акторов, которые участвуют в процессе, где мы будем указывать, там, какие-то некие полномочия, некоторые ограничения, условия, триггер. Основной процесс, как раз альтернативные сценарии, ну и какой-то конечный результат данного сценария, вот. Соответственно, для откажания use case. А вот на практике в своих командах вы обычно юзер-старей используете или нет? На данном… Ну, вообще, в течение времени я использовал юзер-стори описание. Соответственно, к юзер-стори шли критерии приёмки. Критерии приёмки — это всё трассируется с User Story, вот. Но как такового описания сейчас на текущем месте работы не требуется, вот. Use Case тоже описывали. Ну и, в частности, я описываю в текстовом формате, также с указанием всех атрибутов вышеперечисленных. И, соответственно, это служит основой как не только для разработчиков, которые будут, соответственно, разрабатывать функциональность, но также и для тестировщиков, которые будут писать тест-кейсы, PMI и так далее."
    },
    {
      "start_time": "00:09:09,040",
      "end_time": "00:09:26,680",
      "speaker": "interviewer",
      "text": "Окей. Следующий вопрос такой. Допустим, ты пришёл на проект в качестве аналитика. Для тебя, как для аналитика, какие бы ты выделил источники требований? То есть куда бы ты ходил, что бы смотрел, чтобы эти требования собирать?"
    },
    {
      "start_time": "00:09:27,340",
      "end_time": "00:09:55,120",
      "speaker": "candidate",
      "text": "Ну, изначально я бы пообщался с проект-менеджером для того, чтобы утвердить некий круг стейкхолдеров, к которым мне необходимо как раз искать каналы связи для того, чтобы собирать эти требования, вот. Ну и, соответственно, там в зависимости от стейкхолдеров уже и Как говорится, ну, подбирается канал связи для коммуникации, для сбора требований, и по ним дальше ты взаимодействуешь."
    },
    {
      "start_time": "00:09:56,800",
      "end_time": "00:10:12,740",
      "speaker": "interviewer",
      "text": "Окей. Ну а вот помимо стейкхолдеров… Ну, условно говоря, стейкхолдеры — это люди, да? Вот человек может быть источником требований тебе что-то сказать, там, объяснить и так далее. А вот помимо людей, да, и стейкхолдеров, что ещё может быть источником для тебя? Ну, а также текущее, базовое."
    },
    {
      "start_time": "00:10:13,300",
      "end_time": "00:10:33,300",
      "speaker": "candidate",
      "text": "Текущая база данных, ну, условно, там, вики какая-нибудь, документация проекта, которую ведёт, там, текущий аналитик, вот, или проект-менеджер. Также это какие-то видеозаписи, там, всяких митингов, грумингов, ретро и так далее. Ну, здесь на самом деле источником требования выступает множество."
    },
    {
      "start_time": "00:10:33,840",
      "end_time": "00:10:47,820",
      "speaker": "interviewer",
      "text": "Сущности, можно так сказать. А вот на практике чем чаще всего работал? И помимо того, что там общался со стейкхолдерами, какие-то ещё источники использовал в работе? Ну да, на самом деле в процессе работы"
    },
    {
      "start_time": "00:10:48,520",
      "end_time": "00:11:37,080",
      "speaker": "candidate",
      "text": "Как говорится, очень много, ну очень много источников, к которым приходится обращаться. Это не только какие-то носители информации, в том числе люди, да. команды, которые со мной. Ну, а также дополнительное — это какой-то бенчмаркинг, какое-то изучение, анализ рынка. Безусловно, работаю с документаций с вики куда как раз вся история знаний сохраняется вот где описаны все требования описаны система изыск вот ну соответственно также Ну, мы ведем записи всех видеоконференций, ну, и текстовый протокол, вот, и, соответственно, по текстовым протоколам также."
    },
    {
      "start_time": "00:11:38,020",
      "end_time": "00:12:17,530",
      "speaker": "interviewer",
      "text": "Окей, давай маленький кейс. Допустим, ну, я вот заказчик, да, и я хочу, чтобы в нашей системе была доработана форма регистрации пользователей. Допустим, тебе нужно написать постановку чисто вот на доработку фронтовой части, доработку формы. Я тебе говорю, я хочу, чтобы эта форма регистрации пользователей содержала фио, ну, электронную почту, чтобы пользователь указывал, и пароль. Всё. Достаточно ли тебе информации, чтобы написать постановку? Вот если недостаточно, то вот какие бы ты вопросы уточнил и моменты по поводу этой задачи?"
    },
    {
      "start_time": "00:12:17,530",
      "end_time": "00:12:56,180",
      "speaker": "candidate",
      "text": "Ну, я бы первостепенно полез в базу данных, посмотреть, какие данные мы вообще запрашиваем в методе регистрации для того, чтобы определить некий список изменений, да, которые планируются, если функциональность, ну, в дальнейшем будет реализована. Вот. Далее я бы дополнительно зафиксировал все изменения, которые планируются и которые были высказаны стейкхолдерам. Соответственно, Согласовал бы их с стейкхолдером, который вынес такое пожелание. А далее, соответственно, обращаемся к дизайнеру для того, чтобы внести изменения"
    },
    {
      "start_time": "00:12:56,520",
      "end_time": "00:13:31,080",
      "speaker": "interviewer",
      "text": "В интерфейсе, и, соответственно, передаем в разработку. Ну, я, допустим, стрейкхолдер. Вот давай мы имитируем, да, реальную задачу. Вот я тебе могу ответить на твои вопросы и согласовать, что ты хочешь. То есть… да, там, дизайнеру на прорисовку макета, это окей, это понял. Вот всё-таки по самой форме. Чтоб ты еще уточнил. То есть, тут нужен список вопросов от меня. Ну не список вопросов, а просто, ну, хочешь, список вопросов, да."
    },
    {
      "start_time": "00:13:31,700",
      "end_time": "00:14:33,920",
      "speaker": "candidate",
      "text": "Ну, как я и сказал, первоначально нужно посмотреть, как сейчас текущая система работает, какие у нас есть обязательные поля на форме регистрации, какие необходимо внести изменения. Вот. Я бы уточнил конечный набор полей, которые нам необходимы. Соответственно, с данным конечным набором полей пошло бы вносить изменения уже. Со стороны фронтовой части здесь Как я понимаю, у нас уже была реализована некая форма, раз заказчик хочет внести в нее изменения. И, соответственно, уточнил бы дополнительно некие вопросы, которые связаны как раз с интерфейсом. То есть, предполагается ли это изменение удаление, да, тех полей, которые были реализованы ранее, или предполагается также изменение не только полей, но и всего интерфейса в целом? Вот. Ага. Давай чуть-чуть тогда уточню."
    },
    {
      "start_time": "00:14:34,900",
      "end_time": "00:14:59,920",
      "speaker": "interviewer",
      "text": "Есть, ну, конечный набор полей, да, как я сказал, фива, почта и пароль. Они были до этого, они остаются и сейчас. Вопрос такой. Кую бы ты предложил применить на уровне фронта валидацию для этих полей? И предложил бы Ильи вообще. Ну, допустим, вот у нас есть поле «Фио». Я бы, во-первых,"
    },
    {
      "start_time": "00:15:00,120",
      "end_time": "00:15:47,460",
      "speaker": "candidate",
      "text": "Ну если можно выявить инициативу, да, высказать, то первоначально я бы уточнил насчет разделения фила на три поля, вот, соответственно. Потом у нас идет почта и пароль. Соответственно, Поле ввода почты я бы задал маску, которая, соответственно, Валидирует формат как раз имейла, адреса, вот. На уровне… Ну, точнее, не на уровне, а на поле ввода пароля я бы уточнил некие критерии к паролю, которые обычно выставляются, там, не более восьми символов… о, не менее восьми символов, использование специальных символов и так далее. Ну, так же, чтобы уточнил, некоторые конечные"
    },
    {
      "start_time": "00:15:49,320",
      "end_time": "00:16:14,580",
      "speaker": "interviewer",
      "text": "Конечно. Ну, точнее, максимальную длину символов для пароля, вот, дополнительно. Окей. Давай тогда перейдём к следующей теме. Чуть-чуть про архитектуру поспрашиваю. Ну, первый вопрос. В своих проектах с какими приложениями сталкивался, на чем они были, на какой архитектуре вы строили?"
    },
    {
      "start_time": "00:16:14,820",
      "end_time": "00:18:55,300",
      "speaker": "candidate",
      "text": "Ну, в основном это был монолит. Ну, вот когда мы работали на аутсорсе, там некоторые, конечно, задачи были, точнее, проекты были как монолитные, так и микросервисная архитектура. Вот. Соответственно… В остальных проектах тоже такой некий монолит. На текущем месте работаю с микросервисами. Вот. как говорится, одномодельные и многомодельные, разница между ними как бы лежит на поверхности, что мы реализуем некие такие модули в архитектуре, да, которые отвечают за разрабатываемую функциональность за фичи, вот. Ну а, соответственно, основное, как бы, отличие Как и от SOA, сервис-ориентированная архитектура в том, что все они развертываются вместе с базой данных, с одной, в отличие от микросервисов. Основное отличие микросервисов — это как раз является отдельное развертывание, то есть каждому микросервису дополнительно создается там своя очередь дополнительно поднимается база данных вот и тем самым микросервисе микросервисной архитектуре у нас данные становятся Ну, у нас, по сути, нет общих баз данных. Ну, понятное дело, что они могут быть, но это… Зачастую это вот отдельные микросервисы с отдельной базой данных, где у нас В каждой базе данных хранятся данные для корректной работоспособности вот этого микросервиса, и, соответственно, у нас происходит… Ну, обеспечивает такое некое безопасность, тем самым, что если положится один микросервис, то остальные там будут строить. И, соответственно, у нас нету связанных данных, когда у нас Между… Ну когда все, например, модули, да, как в многомодульном монолите, обращаются к одной базе данных. У нас там и, соответственно, уменьшается риск конфликтов и так далее. Вот. Окей, да. Давай ты чуть-чуть уже зашёл на территорию другого вопроса, там, начал про какие-то плюсы, да, рассказывать о микросервисах. Сейчас дойдём."
    },
    {
      "start_time": "00:18:55,400",
      "end_time": "00:19:11,080",
      "speaker": "interviewer",
      "text": "Давай чуть-чуть ещё вернусь про «Монолит». Ну, базовый вопрос, да. В принципе, поняли, что это такое. Давай про его преимущества, его недостатки чуть поговорим. Так, ну, преимущества здесь…"
    },
    {
      "start_time": "00:19:13,360",
      "end_time": "00:21:45,420",
      "speaker": "candidate",
      "text": "У нас, получается, есть, ну, реализуются в коде компоненты, которые можно переиспользовать в микросервисах у нас, соответственно. Приходится дублировать эти компоненты, что является минусом, вот. Также в Monolith Ну и с преимуществом, если говорить Ну, можно сказать, единый источник информации, вот, единая кодовая база, что является, наверное, преимуществом. При масштабировании она… Ну, при увеличении нагрузок она плохо масштабируется, соответственно, это как недостаток. Вот. Также при... движи… ну, в течение проекта, соответственно, там в Monolith остается Legacy код, с которым… ну, и, вероятнее всего, разработчики, которые его писали, они могли уйти из компании. И, соответственно, необходимо выделять время для поиска анализа этой этого кода, что является тоже минусом. Вот. Это, скорее, минус отсутствие документации, чем минус монолита. Ну, как говорится, документация… Какая документация? Если мы говорим про документацию, которая описывает именно код, вот, а если мы говорим про документацию, которую готовят обычно аналитики, как, ну, для конечного пользователя, для… написание технического задания разработчикам то соответственно она особо не даст информации другому разработчику как работает тот или иной legacy код хорошо давай тогда теперь про не микросервиса про распределённую архитектуру, в принципе, чуть-чуть поговорим. Вот помимо микросервисов какие-то еще, знаешь, паттерны? Ну, P2P, когда у нас есть некие узлы системы, Они, соответственно географически распределены. У нас нет общего дата-центра. Ну, у нас нет централизованного, можно сказать, сервера. Каждый узел содержит, там, полную копию всей сети, и, соответственно, между собой они коммуницируют и валидируют все данные, которые содержат, что позволяет как раз обеспечить несколько источников информации при выходе одного узла у нас соответственно не падает со системы"
    },
    {
      "start_time": "00:21:47,100",
      "end_time": "00:21:53,920",
      "speaker": "interviewer",
      "text": "Глубоко ушёл. Тогда давай поделимся, какие есть ещё, да, варианты распределённой архитектуры."
    },
    {
      "start_time": "00:21:54,540",
      "end_time": "00:22:13,180",
      "speaker": "candidate",
      "text": "Дальше. Какие еще знаешь? Event-driven знаешь? Event-driven, да. Ну, это когда у нас архитектура связана на событиях определенных, которые возникают по некоторым… Ну, когда происходит какое-то событие. Вот. Ну, а как именно она реализуется, не могу сказать."
    },
    {
      "start_time": "00:22:13,980",
      "end_time": "00:22:34,560",
      "speaker": "interviewer",
      "text": "Ну давай тогда в архитектуре ещё один вопрос задам. У вас уже много говорили про микросервисы. Давай в общем смысле еще раз повторим про их преимущества и недостатки, и потом еще один вопрос задам про Связанный с сравнением микросервисов и"
    },
    {
      "start_time": "00:22:35,120",
      "end_time": "00:24:09,660",
      "speaker": "candidate",
      "text": "Монолитов. Так, мне сейчас нужно назвать… Микросервис. Да. Ну, во-первых, основное преимущество микросервисов — это распределение нагрузки, это масштабирование, отказоустойчивость. Соответственно, у нас есть ограничение функциональ… отграничение функциональности, потому что у нас каждый микросервис, соответственно, за свою функциональность, вот, тем самым… у нас не возникает никаких конфликтов, ну, при правильном подходе, соответственно. Вот. Также Горизонтальное масштабирование применяется к микросервисам, потому что нам необходимо… реализовывать новые микросервисы. Вот. Соответственно, преимущество — у нас отсутствует общая база данных, что, соответственно, повышает уровень безопасности, у нас меньше возникает конфликтов. к тому, что каждый микросервис работает со своей базой данных. Вот. Из недостатков у нас нет возможности сослаться на реализованные компоненты. Нам необходимо дублировать код, потому что каждый новый микросервис — это каждый новый проект, отдельный новый проект. Вот. Нам необходимо дополнительное развертывать всё это дело. Нам необходимо дополнительно всё это поддерживать, что довольно, ну, что не так дёшево со своей стороны."
    },
    {
      "start_time": "00:24:10,800",
      "end_time": "00:24:37,740",
      "speaker": "interviewer",
      "text": "С точки зрения производительности, допустим, у нас есть две абсолютно идентичные по функционалу системы. Ну они такие, знаешь, в вакууме, допустим, находятся. Вот одна реализована как монолит единый, а вторая точно такая же. уу, построена на микросервисах. Как ты считаешь… Ну или неважно, не на микросервисах, а просто на распределённой какой-то архитектуре, на каком-то паттерне. Как ты считаешь,"
    },
    {
      "start_time": "00:24:37,740",
      "end_time": "00:25:43,580",
      "speaker": "candidate",
      "text": "Какая из них будет работать быстрее? Ну, тут все зависит от размера проекта вообще в целом, от количества функций, которые предоставляет приложение конечному пользователю. Если говорить… Одинаковое количество, абсолютно. Две идентичные системы. Какая из них будет работать быстрее? Ну если говорить о каком-то начальном этапе, то мне кажется, монолит, потому что микросервисы — это Непременно явля… Ну, при передаче Какой-то информации при взаимодействии у нас появляются посредники. То есть мы передаем информацию какому-то микросервису, он ее обрабатывает, идет другой микросервис, и, соответственно, здесь тратится время на коммуникацию между ними. Дополнительно у нас есть также механизм Валидация авторизации микросервиса между друг другом, ну и конечного пользователя, ну клиента с этим микросервисом, что тоже затрудняет процесс. Так что я бы выделил, ну не затрудняет, а я бы сказал увеличит время на обработку. Поэтому я бы выделил, что монолит будет быстрее. Ну, это на первом этапе. Вот. Проект."
    },
    {
      "start_time": "00:25:44,360",
      "end_time": "00:26:28,380",
      "speaker": "interviewer",
      "text": "Давай еще один вопрос. Слышал ли ты что-нибудь про оркестрацию и хореографию? Да, слышал, но детально не подскажу про это. Окей, давай тогда теперь про нотации пообщаемся. Ну, первый вопрос. Общий, да. Какие нотации знаешь, в принципе? В UML я слышал, тоже рассказывал. Давайте какие-нибудь другие. — BPMN, RML, UML, C4. Вот, такие нотации. А, давай тогда про BPMN. Задаю вопрос. Первый вопрос. Без каких элементов ни одна диаграмма не сможет обойтись?"
    },
    {
      "start_time": "00:26:29,100",
      "end_time": "00:26:48,700",
      "speaker": "candidate",
      "text": "Ну, во-первых, без дорожек, без общего пула, без событий без связей и без начальной ну точки входа и точки выхода ну когда старт и стоп"
    }
  ]
}